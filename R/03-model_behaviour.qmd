---
title: "Modelling the effect of urbanization, shell phenotype and infection status on behaviour"
format: html
editor_options: 
  chunk_output_type: console
---


```{r load-packages}
library(brms) # CRAN v2.22.0
library(cmdstanr) # https://stan-dev.r-universe.dev v0.9.0
library(ggtext) # CRAN v0.1.2
library(ncf) # CRAN v1.3-2
library(patchwork) # CRAN v1.3.0
library(rptR) # CRAN v0.9.22
library(sf) # CRAN v1.0-20
library(tidyverse) # CRAN v2.0.0
library(tidybayes) # CRAN v3.0.7

library(here) # CRAN v1.0.1

options(mc.cores = 4)
```

We first start by importing the raw datasets

```{r import-raw}
sites <- read_sf(here("data", "gpkg", "sites.gpkg"))

centroid <- read_sf(here("data", "gpkg", "UCDB_centroid.gpkg")) |>
  st_transform(st_crs(sites))

snail_size <- read_csv(here("data", "snail_phenotype", "snail_shell_size.csv"))

snail_colour <- read_csv(here("data", "snail_phenotype", "colour_cornu.csv"))

snail_behav <- read_csv(here("data", "snail_phenotype", "snail_behaviour.csv"))

parasites <- read_csv(here("data", "parasites", "combined_parasites_occurrence.csv")) |>
  mutate(
    other_nematodes = as.numeric((nematodes_lung + nematodes_bw_shell_body) > 0),
    sporocerc = as.numeric((sporocysts + cercariae) > 0)
  )
```

(For the description of the columns in `sites`,`centroid`, `snail_size`, `snail_colour` and `parasites`, see the `01-model_size_colour` and `02-model_parasites` scripts)

The `snail_behav` dataset contains the following columns:

- `SiteID`: a site numbered ID
- `Species`: in the format [genus]_[species]. We only use data from *Cornu aspersum* in this study.
- `SnailID`: unique snail ID, following a [`SiteID`][unique letter]_[first two letters of genus] format
- `datetest_[number]`: date of behavioural test [number]
- `dist_[number]` and `time_[number]`: distances and times to use in calculating mobility speed for behavioural trial [number]
- `food_[number]`: food consumed (in g) in trial [number]
- `early_death`: a flag identifying which snails died prematurely during the experiment

# Process data

We create the "distance to urban centroid" variable, and create explicit columns for the sites XY coordinates, that will be useful for diagnostics of residual spatial autocorrelation:

```{r distances-urban}
sites$dist_urban <- as.numeric(st_distance(sites, centroid)[, 1])

sites$coordX <- st_coordinates(sites)[, 1]
sites$coordY <- st_coordinates(sites)[, 2]
```


```{r make-table}
tab_behav <- snail_behav |>
  filter(Species == "Cornu_aspersum") |>
  # we need data in long_format
  pivot_longer(c(datetest_1, datetest_2, time_1, time_2, dist_1, dist_2, food_1, food_2),
    names_to = c(".value", "trial"),
    names_sep = "_",
  ) |>
  mutate(
    speed = dist / time, ## units are mm and s
    trial = as.numeric(trial)
  ) |>
  left_join(snail_size) |>
  left_join(snail_colour) |>
  left_join(parasites) |>
  left_join(sites) |>
  mutate(size = (diameter_mm_1 + diameter_mm_2) / 2)
```

We get some useful statistics for the Methods
```{r useful-stats}
## among the dead ones, how many died between trials vs before all trials?
tab_behav |>
  group_by(early_death, SnailID) |>
  summarise(ntrials = sum(!is.na(dist))) |>
  group_by(early_death) |>
  count(ntrials)

# excluding the missing values, how many speed records do we have?
sum(!is.na(tab_behav$speed))
tab_behav |>
  filter(!is.na(speed)) |>
  summarise(n = n_distinct(SnailID))

# same as above, but for food
tab_behav |>
  group_by(early_death, SnailID) |>
  summarise(ntrials = sum(!is.na(food))) |>
  group_by(early_death) |>
  count(ntrials)

sum(!is.na(tab_behav$food))
tab_behav |>
  filter(!is.na(food)) |>
  summarise(n = n_distinct(SnailID))

## we note that we have more food than speed records. This is because some non-dead snails were inactive despite our efforts during at least one movement trial (so NA) but did provide valid food records the night after
```

```{r scaling-predictors}
tab_behav$size_scaled <- scale(tab_behav$size)[, 1]

tab_behav$reflect_scaled <- scale(tab_behav$avg_reflectance)[, 1]
tab_behav$sigma_reflect_scaled <- tab_behav$sigma_reflectance / sd(tab_behav$avg_reflectance)

sd_size <- sd(tab_behav$size)
mean_size <- mean(tab_behav$size)
sd_reflect <- sd(tab_behav$avg_reflectance)
mean_reflect <- mean(tab_behav$avg_reflectance)
```

For food, we note that some values are 0s, which cannot be analyzed using Beta models:
```{r food-check1}
table(is.na(tab_behav$food))
table(tab_behav$food > 0)
```

Given the limited number of these values and the fact they may be due to measurement uncertainty/ detection threshold issues, we can deal with them using a transformation:

$p^* = (p (n-1) + 0.5 )/n$ where $p$ is the original **proportion**, $p^*$ the transformed proportion and $n$ the total number of observations (we do not include the missing observations to be imputed by the model in that number, but results do not change meaningfully if we do). This transformation can be traced back to Smithson & Verkuilen (2006) (DOI: 10.1037/1082-989X.11.1.54), but while the article is still accessible, the Supplementary Material where the transformation is actually mentioned is lost to link rot (it is sadly not mentioned at all in the main text, which only says "in practice, this transformation usually needs to be modified slightly to avoid zeros and ones in the data (this issue is discussed in the supplementary material referred to in Footnote 2)"). For a citation that actually mention the transformation in the main text, one can use Douma & Weedon (2019) (DOI: 10.1111/2041-210X.13234) (they credit the original source).

Alternatively we could have attempted to use censoring in model (treating 0s as left-censored values set at the detection threshold), but as of writing, there are issues with correctly including both censoring and missing values for non-gaussian models

```{r betavar-transform}
SV2006 <- function(p, n) {
  pstar <- (p * (n - 1) + 0.5) / n
  return(pstar)
}

# we'll need a back transformation to convert predictions back to original scale
inverse_SV2006 <- function(pstar, n) {
  p <- (pstar * n - 0.5) / (n - 1)
  return(p)
}
```


```{r food-check2}
nobs_food <- sum(!is.na(tab_behav$food))

tab_behav$food_transformed <- SV2006(tab_behav$food / 2, nobs_food)

plot(tab_behav$food / 2, tab_behav$food_transformed)
abline(0, 1)
plot(tab_behav$food / 2, tab_behav$food_transformed - tab_behav$food / 2)
abline(h = 0)

# check that the backtransformation works correctly
plot(
  tab_behav$food / 2,
  inverse_SV2006(tab_behav$food_transformed, nobs_food) - tab_behav$food / 2
)
abline(h = 0)
# it works (remaining deviations from 0 are floating point errors, see scale on y-axis)
```

# The model

```{r brm-formulas}
bf_food <- bf(
  food_transformed | mi() ~
    size_scaled +
    me(reflect_scaled, sigma_reflect_scaled) +
    scale(dist_urban) +
    nematodes_genitalia + other_nematodes + metacercariae + sporocerc +
    (1 | p | SiteID) + (1 | q | SnailID),
  nlf(phi ~ phi2+2), # in this and corresponding prior choice, we follow McElreath 2020 (p371)
  lf(phi2 ~ 1),
  family = Beta(link = "logit", link_phi = "identity")
)

bf_speed <- bf(
  speed | mi() ~
    size_scaled +
    me(reflect_scaled, sigma_reflect_scaled) +
    scale(dist_urban) +
    nematodes_genitalia + other_nematodes + metacercariae + sporocerc +
    (1 | p | SiteID) + (1 | q | SnailID),
  family = weibull
)
# preliminary checks shows that here, weibull on speed has better pp_check properties than gamma or lognormal (not perfect, but way better)
```


```{r model}
if (file.exists(here("R_output", "model_behaviour.RDS")))
# this if-else statement is avoid re-fitting a model when knitting Rmd file if there is already one existing in R_output
# to override, re-run the model and re-save manually by selecting relevant code lines then knit (or delete the RDS object)
  {
    mod <- readRDS(here("R_output", "model_behaviour.RDS"))
  } else {
  mod <- brm(mvbf(bf_food, bf_speed, rescor = FALSE),
    data = tab_behav,
    backend = "cmdstanr",
    seed = 42,
    iter = 6000, warmup = 3000, control = list(adapt_delta = 0.9),
    save_pars = save_pars(group = TRUE, latent = TRUE),
    prior = c(
      set_prior("normal(0,1.5)", class = "Intercept", resp = "foodtransformed"),
      set_prior("normal(0,1)", class = "Intercept", resp = "speed"),
      set_prior("normal(0,1)", class = "b", resp = c("speed", "foodtransformed")),
      set_prior("normal(0,1)", class = "sd", resp = c("speed", "foodtransformed")),
      set_prior("exponential(1)", class = "shape", resp = "speed"),
      set_prior("exponential(1)", nlpar = "phi2", resp = "foodtransformed", class = "b", lb = 0),
      set_prior("lkj(2)", class = "cor")
    )
  )

  saveRDS(mod, file = here("R_output", "model_behaviour.RDS"))
}

summary(mod)
```

It's a little trickier to get pp_checks using the ready-made function from brms with missing data imputed using `mi()`, so we'll have to go directly to the underlying functions brms use

```{r ppchecks}
ppfitspeed <- posterior_predict(mod, resp = "speed", newdata = filter(tab_behav, !is.na(speed)))

bayesplot::ppc_dens_overlay(
  y = filter(tab_behav, !is.na(speed))$speed,
  yrep = ppfitspeed[1:50, ]
)

bayesplot::ppc_dens_overlay_grouped(
  y = filter(tab_behav, !is.na(speed))$speed,
  yrep = ppfitspeed[1:50, ],
  group = filter(tab_behav, !is.na(speed))$SiteID
)

bayesplot::ppc_pit_ecdf(
  y = filter(tab_behav, !is.na(speed))$speed,
  yrep = ppfitspeed,
  prob = 0.95, plot_diff = TRUE
)
## slightly off, but still good enough

ppfitfood <- posterior_predict(mod, resp = "foodtransformed", newdata = filter(tab_behav, !is.na(food_transformed)))

bayesplot::ppc_dens_overlay(
  y = filter(tab_behav, !is.na(food_transformed))$food_transformed,
  yrep = ppfitfood[1:50, ]
)

bayesplot::ppc_dens_overlay_grouped(
  y = filter(tab_behav, !is.na(food_transformed))$food_transformed,
  yrep = ppfitfood[1:50, ],
  group = filter(tab_behav, !is.na(food_transformed))$SiteID
)

bayesplot::ppc_pit_ecdf(
  y = filter(tab_behav, !is.na(food_transformed))$food_transformed,
  yrep = ppfitfood,
  prob = 0.95, plot_diff = TRUE
)

## the pit ecdf plot is off for food
## in a way that may suggest overdispersion
## however, changing prior to favour lower values of precision parameter does not change posterior
## so not obviously due to prior
## + not any obvious misspecification signal from the dens_overlay_grouped plot
## (not shown) tried as solution, to set variable precision parameters per Site 
## (random effect of site, doubly hierarchical model)
## but no change to pit ecdf issues
## as there are no further obvious options to change model (e.g. no predictor to add, no obviously valid transformation)
## decision: use model as is


# newdata because otherwise fails with mi()
```

We again check the residual spatial autocorrelation:

```{r residual-autocor}
residuals_food <- residuals(mod,
  resp = "foodtransformed", re_formula = ~ (1 | SiteID / SnailID), # type="pearson",
  summary = TRUE
)[, 1]

pp <- spline.correlog(
  x = tab_behav$coordX / 1000, y = tab_behav$coordY / 1000,
  z = residuals_food,
  na.rm = TRUE
)

plot(pp)

residuals_speed <- residuals(mod,
  resp = "speed", re_formula = ~ (1 | SiteID / SnailID), # type="pearson",
  summary = TRUE
)[, 1]

pp <- spline.correlog(
  x = tab_behav$coordX / 1000, y = tab_behav$coordY / 1000,
  z = residuals_speed,
  na.rm = TRUE
)

plot(pp)
```

# Get info for Table and Results

```{r summary}
summary(mod)
# !!! IMPORTANT don't forget to add +2 back to phi2 to get correct phi back (see model formula above)
```

```{r bayes-R2}
bayes_R2(mod, resp = "speed", newdata = filter(tab_behav, !is.na(speed)), re_formula = NA)
bayes_R2(mod, resp = "speed", newdata = filter(tab_behav, !is.na(speed)))


bayes_R2(mod, resp = "foodtransformed", newdata = filter(tab_behav, !is.na(food_transformed)), re_formula = NA)
bayes_R2(mod, resp = "foodtransformed", newdata = filter(tab_behav, !is.na(food_transformed)))
```

# Plots 

```{r plot-food1-fig4}
fits_food1 <- tibble(
  size = c(255:410) / 10,
  dist_urban = mean(tab_behav$dist_urban),
  reflect_scaled = 0,
  sigma_reflect_scaled = mean(tab_behav$sigma_reflect_scaled),
  food_censor = "none",
  nematodes_genitalia = 0,
  other_nematodes = 0,
  sporocerc = 0,
  metacercariae = 0
) |>
  mutate(size_scaled = (size - mean_size) / sd_size) |>
  add_epred_draws(mod, resp = "foodtransformed", re_formula = NA) |>
  mutate(.epred = inverse_SV2006(.epred, nobs_food))

p_food1 <- ggplot(tab_behav) +
  stat_lineribbon(data = fits_food1, aes(size, .epred * 2), fill = "#fab07c", .width = 0.95) +
  geom_point(aes(size, food), col = "#d5905d", alpha = 0.25) +
  labs(x = "Shell size (mm)", y = "Food intake (g per test session)") +
  theme_bw() +
  theme(legend.position = "none")

p_food1

ggsave(filename = here("R_output", "Fig4.pdf"), width = 4, height = 4)
```

```{r plot-food2}
fits_food2 <- tibble(
  size_scaled = 0,
  dist_urban = mean(tab_behav$dist_urban),
  reflect_scaled = 0,
  sigma_reflect_scaled = mean(tab_behav$sigma_reflect_scaled),
  food_censor = "none",
  nematodes_genitalia = 0,
  other_nematodes = 0,
  sporocerc = c(0, 1),
  metacercariae = 0
) |>
  add_epred_draws(mod, resp = "foodtransformed", re_formula = NA) |>
  mutate(.epred = inverse_SV2006(.epred, nobs_food))

p_food2 <- ggplot(tab_behav) +
  stat_eye(data = fits_food2, aes(sporocerc, .epred * 2, fill = factor(sporocerc)), .width = c(0, 0.95)) +
  geom_segment(
    data = snail_behav |> # drawing is easier if behaviours are in wide format, so we go back to there
      filter(Species == "Cornu_aspersum") |>
      left_join(parasites),
    aes(
      x = sporocerc - 0.25, xend = sporocerc + 0.25,
      y = food_1, yend = food_2, 
      col = factor(sporocerc)
    ),
    alpha = 0.25
  ) +
  geom_point(
    aes(
      sporocerc + 0.5 * (trial - 1.5), food,
      col=factor(sporocerc)
    ), 
    alpha = 0.25
  ) +
  stat_eye(data = fits_food2, aes(sporocerc, .epred * 2), .width = c(0, 0.95), fill = NA) +
  scale_color_manual(values=c("#d5905d","#5e3c99"))+
  scale_fill_manual(values=c("#fab07c","#b2abd2"))+
  labs(x = "Infected by sporocysts?", y = "Food intake (g per test session)") +
  scale_x_continuous(breaks = c(0, 1), labels = c("no", "yes")) +
  theme_bw() +
  theme(
    legend.position = "none",
    axis.title.x = element_markdown()
  )

p_food2
```


```{r plot-speed}
fits_speed <- tibble(
  size_scaled = 0,
  dist_urban = mean(tab_behav$dist_urban),
  reflect_scaled = 0,
  sigma_reflect_scaled = mean(tab_behav$sigma_reflect_scaled),
  food_censor = "none",
  nematodes_genitalia = c(0, 1),
  other_nematodes = 0,
  sporocerc = 0,
  metacercariae = 0
) |>
  add_epred_draws(mod, resp = "speed", re_formula = NA)

p_speed <- ggplot(tab_behav) +
  stat_eye(data = fits_speed, aes(nematodes_genitalia, .epred, fill = factor(nematodes_genitalia)), .width = c(0, 0.95)) +
  geom_segment(
    data = snail_behav |> # drawing is easier if behaviours are in wide format, so we go back to there
      filter(Species == "Cornu_aspersum") |>
      left_join(parasites),
    aes(
      x = nematodes_genitalia - 0.25, xend = nematodes_genitalia + 0.25,
      y = dist_1 / time_1, yend = dist_2 / time_2,
      col =factor(nematodes_genitalia)
    ),
    alpha = 0.25
  ) +
  geom_point(
    aes(
      nematodes_genitalia + 0.5 * (trial - 1.5), speed,
      col =factor(nematodes_genitalia)
    ),
    alpha = 0.25
  ) +
  stat_eye(data = fits_speed, aes(nematodes_genitalia, .epred), .width = c(0, 0.95), fill = NA) +
  scale_color_manual(values=c("#d5905d","#5e3c99"))+
  scale_fill_manual(values=c("#fab07c","#b2abd2"))+
  labs(x = "Infected by _Nemhelix bakeri_?", y = "Movement speed (mm/s)") +
  scale_x_continuous(breaks = c(0, 1), labels = c("no", "yes")) +
  theme_bw() +
  theme(
    legend.position = "none",
    axis.title.x = element_markdown()
  )

p_speed
```

```{r fig5}
(p_food2 | p_speed)

ggsave(filename = here("R_output", "Fig5.pdf"), width = 8, height = 4)
```
